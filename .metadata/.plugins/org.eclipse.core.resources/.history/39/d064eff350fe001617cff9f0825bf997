package msgcomm;

import java.util.HashMap;
import java.util.Map;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;

import org.apache.activemq.ActiveMQConnection;
import org.apache.activemq.ActiveMQConnectionFactory;

import net.sf.json.JSONObject;

class ThreadTest extends Thread {
	private int ticket = 100;
	public void run() {
		while(true) {
			if (ticket > 0){
				System.out.println(Thread.currentThread().getName() + "is saling ticket" + ticket--);
			}else
			{
				break;
			}
		}
	}
}

class ThreadTest2 implements Runnable {
	private int tickets = 60000;
	public Session session_t;
	public MessageProducer  messageProducer_t;
	public ThreadTest2(Session session, MessageProducer messageProducer) {
		session_t = session;
		messageProducer_t = messageProducer;
	}
	private int sendCount = 0;
	public void run(){
		while(true){
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}

public class recvMsg {
	public void recMsgRunning() {
		ConnectionFactory connectionFactory;
		Connection connection = null;
		Session session;
		Destination destination;
		MessageConsumer consumer;
		connectionFactory = new ActiveMQConnectionFactory (ActiveMQConnection.DEFAULT_USER,ActiveMQConnection.DEFAULT_PASSWORD,"tcp://localhost:61616");
		try {
			connection = connectionFactory.createConnection();
			connection.start();
			session = connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE);
			//destination = session.createQueue("FirstQueue");
			destination = session.createTopic("zhaoTopic");
			consumer = session.createConsumer(destination);
			ThreadTest2 thread_test = new ThreadTest2(session, consumer);
			thread_test.run();
//			while (true) {
//				TextMessage message = (TextMessage)consumer.receive(1000*10);
//				if (null != message) {
//					System.out.println("recevie message: " + message.getText());
//				}else {
//					break;
//				}
//			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			try {
				if (null != connection) {
					connection.close();
				}
			}catch(Throwable ignore) {
				
			}
		}
		System.out.println("Hello World Receive.");
	}
}